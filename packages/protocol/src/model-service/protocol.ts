/********************************************************************************
 * Copyright (c) 2023 CrossBreeze.
 ********************************************************************************/
import * as rpc from 'vscode-jsonrpc/node';

/**
 * Serialized version of the semantic model generated by Langium.
 */

export interface CrossModelRoot {
   readonly $type: 'CrossModelRoot';
   entity?: Entity;
   relationship?: Relationship;
}

export function isCrossModelRoot(model?: any): model is CrossModelRoot {
   return !!model && model.$type === 'CrossModelRoot';
}

export interface Entity {
   readonly $type: 'Entity';
   attributes: Array<EntityAttribute>;
   description?: string;
   id?: string;
   name?: string;
}

export interface EntityAttribute {
   readonly $type: 'EntityAttribute';
   datatype?: string;
   description?: string;
   id?: string;
   name?: string;
}

export interface Relationship {
   readonly $type: 'Relationship';
   child?: string;
   description?: string;
   id?: string;
   name?: string;
   parent?: string;
   type?: string;
}

export interface DiagramNodeEntity {
   uri: string;
   model: CrossModelRoot;
}

export function isDiagramNodeEntity(model?: any): model is DiagramNodeEntity {
   return !!model && model.uri && model.model && isCrossModelRoot(model.model);
}

export interface ClientModelArgs {
   uri: string;
   clientId: string;
}

export interface OpenModelArgs extends ClientModelArgs {
   languageId?: string;
}

export interface CloseModelArgs extends ClientModelArgs {}

export interface UpdateModelArgs<T> extends ClientModelArgs {
   model: T | string;
}

export interface SaveModelArgs<T> extends ClientModelArgs {
   model: T | string;
}

export interface ModelUpdatedEvent<T> {
   uri: string;
   model: T;
   sourceClientId: string;
}

export interface ModelSavedEvent<T> {
   uri: string;
   model: T;
   sourceClientId: string;
}

export const OpenModel = new rpc.RequestType1<OpenModelArgs, CrossModelRoot | undefined, void>('server/open');
export const CloseModel = new rpc.RequestType1<CloseModelArgs, void, void>('server/close');
export const RequestModel = new rpc.RequestType1<string, CrossModelRoot | undefined, void>('server/request');
export const RequestModelDiagramNode = new rpc.RequestType2<string, string, DiagramNodeEntity | undefined, void>(
   'server/requestModelDiagramNode'
);
export const UpdateModel = new rpc.RequestType1<UpdateModelArgs<CrossModelRoot>, CrossModelRoot, void>('server/update');
export const SaveModel = new rpc.RequestType1<SaveModelArgs<CrossModelRoot>, void, void>('server/save');
export const OnSave = new rpc.NotificationType1<ModelSavedEvent<CrossModelRoot>>('server/onSave');
export const OnUpdated = new rpc.NotificationType1<ModelUpdatedEvent<CrossModelRoot>>('server/onUpdated');
